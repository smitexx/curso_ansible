**********CARPETAS DEL PROYECTO************
common: Common playbooks, roles and vars files to all the environments

old: Files before splitting environments, not referenced, and deprecated

template: Template for new environments.

hq: Environment used to manage hosts at erasmusu HQ.

php56: Environment to tests php 5.6 migration.

production: Production environment (current).

replica: Environment used to test mysql replication between ovh and aws hosts.

furl-service: furl-service environment for test furl service.

infra:

test: 

**INICIO**
Para empezar con ansible tendremos que tener descargado pip y pipenv, para desplegar en un directorio un entorno virtual de repositorios que serán los deseados para trabajar con ellos, estos repositorios son de python y están restringidos a los que nos ofrece, para montar el entorno virtual tenemos que tener un fichero de configuración con los repositorios requeridos, llamado Pipfile

--Pipfile--

[[source]]
url = "https://pypi.org/simple"
verify_ssl = true
name = "pypi"

[dev-packages]

[packages]
ansible = "==2.6.2"
awscli = "==1.15.76"
botocore = "==1.10.75"
"boto3" = "==1.7.75"
boto = "==2.49.0"
jmespath = "==0.9.3"
ansible-cmdb = "==1.28"
ansible-lint = "==3.4.23"
requests = "==2.22.0"
ipython = "*"

[requires]
python_version = "3.5"


Para montar el entorno virtual 

pipenv install --> en el directorio donde tengamos el fichero pipfile 

pipenv shell --> para lanzar la consola que nos permite usar los repositorios requeridos.



********INCISO CON VAGRANT**************

Vagrant nos permite levantar las máquinas virtuales que queramos, para ello tenemos que tener un Vagrantfile en nuestro proyecto.

Previamente tenemos que añadir las imágenes de los sistemas operativos que necesitemos a nuestro vagrant.

vagrant box list --> nos muestra la lista de imágenes que tiene vagrant de SSOO.

Comandos: 
1) vagrant create --> nos genera el fichero Vagrantfile, este tiene toda la configuración de las máquinas virtuales que queremos levantar.
2) vagrant up --> levantamos la máquina

Para configurar el ssh y poder tener acceso ssh desde otra máquina tenemos que ejecutar lo siguiente:

1) vagrant ssh-config --> esto nos muestra la configuración de nuestra máquina virtual, la salida de esta configuración hay que llevarla al config del .ssh
2) vagrant ssh-config >> ~/.ssh/config --> con esto tenemos configurado el ssh a la máquina virtual, ya que vagrant por defecto nos añade la clave pública en nuestro ssh/authorized_keys

Si utilizamos ansible con vagrant tendremos que tener instalado en nuestras máquinas virtuales python.

1)ssh default --> entramos a la máquina virtual por ssh  
2)sudo apt install python

Para configurar el agente SSH para evitar volver a escribir las contraseñas, puede hacer lo siguiente:

1) ssh-agent bash
2) ssh-add ~/.ssh/id_rsa


CARPETAS DE UN PROYECTO ANSIBLE:

inventory: guarda el inventorio de hosts a los que se le lanzan las acciones definidas

├── inventory
│   ├── group_vars --> variables de los grupos habría que hacer un fichero .yml con cada grupo
│   ├── hosts
│   └── host_vars
│       ├── default.yml --> fichero de variables de la máquina virtual
│       └── localhost.yml --> fichero de variables del localhost


1)COMANDOS AD-HOC

ansible default -a "/sbin/reboot" -b --> reinicia la máquina virtual.

ansible default -m copy -a "src=/etc/hosts dest=/tmp/hosts" --> copiar

MODULO FILE

ansible webservers -m file -a "dest=/srv/foo/b.txt mode=600 owner=mdehaan group=mdehaan" --> cambia permisos, usuario y grupo de un archivo.

ansible webservers -m file -a "dest=/path/to/c mode=755 owner=mdehaan group=mdehaan state=directory" --> crea un directorio con esas características.

ansible webservers -m file -a "dest=/path/to/c state=absent" --> elimina un directorio

MODULO APT

ansible webservers -m apt -a "name=acme state=present" --> asegurese de que el paquete esta presente

ansible webservers -m apt -a "name=acme state=absent" --> asegurese de que el paquete no está presente 

MODULO USER

ansible all -m user -a "name=foo password=<crypted password here>" --> crea un usuario

ansible all -m user -a "name=foo state=absent" --> elimina un usuario


HOSTS Y GRUPOS: Las variables definidas en groups_vars y hosts_vars tienen mayor precedencia que las definidas en el fichero de hosts.

PRECEDENCIA DE MENOR A MAYOR EN CUANTO A LA DEFINICIÓN DE VARIABLES.

all group (because it is the ‘parent’ of all other groups)
parent group
child group
host

Definición de grupos y hosts con grupos de grupos con :children.

[atlanta]
host1
host2

[raleigh]
host2
host3

[southeast:children] --> southeast es un grupo de los grupos atlanta y raleigh
atlanta
raleigh

[southeast:vars]
some_server=foo.southeast.example.com
halon_system_timeout=30
self_destruct_countdown=60
escape_pods=2






